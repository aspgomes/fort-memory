!*
!*
!* Copyright (c) 2008-2013 Andre Severo Pereira Gomes <andre.gomes@univ-lille1.fr>
!* All rights reserved.
!*
!* Redistribution and use in source and binary forms, with or without
!* modification, are permitted provided that the following conditions
!* are met:
!* 1. Redistributions of source code must retain the above copyright
!*    notice, this list of conditions and the following disclaimer.
!* 2. Redistributions in binary form must reproduce the above copyright
!*    notice, this list of conditions and the following disclaimer in the
!*    documentation and/or other materials provided with the distribution.
!*
!* THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
!* ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
!* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
!* ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
!* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
!* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
!* OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
!* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
!* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
!* OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
!* SUCH DAMAGE.
!*
!*
!
!

#definetype T C  complex
#definetype T R  real
#definetype T I  integer

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
      module allocator_internal_init_<T>
      
         use allocator_parameters

         implicit none
         
         private
 
         public initData_<T>

         interface initData_<T>
            module procedure initData_1d_<T>
            module procedure initData_2d_<T>
            module procedure initData_3d_<T>
            module procedure initData_4d_<T>
         end interface initData_<T>

         contains

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
!
! initialization routines
!
            subroutine initData_1d_<T>(data,offt_1,offt_2)
               integer :: i, offt_1,offt_2
               @T(kind=k@T) :: data(:)

! aspg: for some reason, initializing the data here doesnt work starting
!       from offt_1 up to offt_2, but starting from 1 to the size
!       of the array works. wonder if this is a compiler issue or me
!       just making a mess..

               do i=1,(offt_2-offt_1)+1
                  data(i) = 0.0D0
               enddo

            end subroutine initData_1d_<T>


            subroutine initData_2d_<T>(data,offt1_i,offt2_i,offt1_j,offt2_j)
               integer :: i, offt1_i,offt2_i
               integer :: j, offt1_j,offt2_j
               @T(kind=k@T) :: data(:,:)

               do i=1,(offt2_i-offt1_i)+1
                  do j=1,(offt2_j-offt1_j)+1
                     data(i,j) = 0.0D0
                  enddo
               enddo

            end subroutine initData_2d_<T>


            subroutine initData_3d_<T>(data,offt1_i,offt2_i,offt1_j,offt2_j,offt1_k,offt2_k)
               integer :: i, offt1_i,offt2_i
               integer :: j, offt1_j,offt2_j
               integer :: k, offt1_k,offt2_k
               @T(kind=k@T) :: data(:,:,:)

               do i=1,(offt2_i-offt1_i)+1
                  do j=1,(offt2_j-offt1_j)+1
                     do k=1,(offt2_k-offt1_k)+1
                        data(i,j,k) = 0.0D0
                     enddo
                  enddo
               enddo

            end subroutine initData_3d_<T>


            subroutine initData_4d_<T>(data,offt1_i,offt2_i, &
     &                                      offt1_j,offt2_j, &
     &                                      offt1_k,offt2_k, &
     &                                      offt1_l,offt2_l )
               integer :: i, offt1_i,offt2_i
               integer :: j, offt1_j,offt2_j
               integer :: k, offt1_k,offt2_k
               integer :: l, offt1_l,offt2_l
               @T(kind=k@T) :: data(:,:,:,:)

               do i=1,(offt2_i-offt1_i)+1
                  do j=1,(offt2_j-offt1_j)+1
                     do k=1,(offt2_k-offt1_k)+1
                        do l=1,(offt2_l-offt1_l)+1
                           data(i,j,k,l) = 0.0D0
                        enddo
                     enddo
                  enddo
               enddo

            end subroutine initData_4d_<T>


      end module allocator_internal_init_<T>
